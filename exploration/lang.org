* Тестирование
  Для анализа потребления использования памяти локальными переменными выбл выбран
  код на Java. Это было сделано по трём причинам:
  1. Язык содержит сборку мусора и, по этому, в программах, кроме критических
     мест, не обращают пишут специальный код для более удобного управления
     памятью.
  2. Существует большое число свободного программного кода на Java.
  3. Java содержит достаточно мало синтаксического сахара, по сравнению с другими
     похожими языками, такими как C#.

  Код на java был обработан следующим образом:
  1. Из файлов были выделены только функции.
  2. Выражения и вызовы методов были заменены на инструкцию expr(local variables)
  3. Объявление локальной переменной было заменено на инструкцию
     create(var_name, expr(...)).
  4. Присваивание локальной переменной нового значения трактовалось как инструкция
     change(var_name, expr(...)).

  После чего в код были добавлены инструкции destroy(local variables) после
  последнего использования переменной в коде.

  Эта модель очень упрощена и не отражает реальной связи между объектами в
  программе на java, но позволяет оценить реальные практики построения кода.

  После указанных преобразований было проведено выделение всех возможных путей
  выполнения кода. Таким образом операции ветвления (if) были заменены на набор
  альтернативных блоков block(Condition, Then Branch) и 
  block(Condition, Else Branch). Циклы, для определённости, были заменены на
  десятикратное выполнение тела цикла.

  Получившиеся пути были выполнены на двух моделях памяти:
  1. Stack of Stacks модель памяти создаёт новый стек для локальных переменных
     при входе в каждый блок. При выполнении команды create(var,...) создавалась
     переменная var на вершине верхнего стека данных. При выполнении
     change(var,..) находился стек в котором располагалась переменная var,
     переменная помечалась как удалённая, с вершины стека снимались все удалённые
     переменные, после чего на вершине результирующего стека создавалась новая
     переменная с именем var. При выполнении команды delete(var) обнаруживался
     стек в котором располагалась переменная var, переменная помечалась как
     удалённая, после чего с вершины стека снимались все удалённые переменные.
  2. Stack of Queues имела аналогичное поведение, с той лишь разницей, что для
     управления памятью внутри блоков использовались очереди, а не стеки. То есть
     удалённые переменные снимались с конца очереди, а не с вершины очереди.

  После каждой инструкции expr(...) сохранялось количество переменных
  располагающихся в памяти в данный момент. Как живых, так и помеченных как 
  удалённые. После получения результатов потребления памяти в каждой модели
  для каждого пути вычислялось среднее потребление памяти и сравнивалось какая
  модель потребляла меньше памяти. Так по результатам проверки на 50 файлах из
  состава исходных кодов программ jruby и eclipse, было выделено 22490 путей
  среди которых в 848 случаях Stack of Stacks потреблял меньше памяти, в 2265
  случаях потребление памяти двумя моделями было одинаковым и в 19377 случаях
  Stack of Queues потреблял меньше памяти.

  Это показывает, что в реальном коде чем позже была создана локальная переменная
  тем позже она будет уничтожена. Или, точнее, что переменные используются
  чаще всего для временного хранения данных, до того как те будут обработаны.

* Для синтаксического представления очереди необходимы пересекающиеся блоки кода
  queue(a) .... queue(b) .... end(a) .... queue(c) .... end(b) .... end(c)

  Легко заметить, что если queue и end не помечены отдельными символами, то
  этот язык эквивалентен языку сбалансированных скобок и отличается лишь
  семантикой.

  Если же queue и end помечены, то язык нельзя распознать контекстно свободной
  грамматикой, поскольку в случае "queue(a) S end(a) Q"  для того чтобы
  распознать Q необходимо иметь список всех queue(X) обнаруженных в S.

  В случае, когда возможных меток конечное число, то возможно построить
  контекстно свободную грамматику, распознающую соответствующий язык. Так если
  возможны всего три варианта меток, то грамматика будет следующей:

  S -> '(' NC | '[' NS | '{' NF | nil

  NC -> '[' NCS | '{' NCF | ')' S

  NCS -> '{' NCSF | ')' NS
  NCF -> '[' NCFS | ')' NF

  NCSF -> ')' NSF  
  NCFS -> ')' NFS

  NS -> '(' NSC | '{' NSF | ']' S

  NSC -> '{' NSCF | ']' NC
  NSF -> '(' NSFC | ']' NF

  NSCF -> ']' NCF
  NSFC -> ']' NFC

  NF -> '(' NFC | '[' NFS | ']' S

  NFC -> '[' NFCS | '}' NC
  NFS -> '(' NFSC | '}' NS

  NFCS -> '}' NCS
  NFSC -> '}' NSC
  
  Но, поскольку в этом случае для каждого возможного порядка уже открытых, но ещё
  не закрытых блоков необходимо иметь по отдельному нетерменалу в грамматике.
  Таким образом грамматика для n возможных меток блоков содержит
  "sum from k=0 to n { A_n^k }" нетерменальных символов.

  Практическое использование такой грамматики не представляется возможным,
  поскольку, если разрешить использовать в качестве меток только цифры, то
  потребуется грамматика с 9864101 нетерменальных символов.

  
